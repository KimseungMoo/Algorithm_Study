function fibonacci(n, memo=[]) {
  // TODO: 여기에 코드를 작성합니다.

//0
//1

//1
//2
//메모이제이션으로 문제를 해결하려고 합니다.
//따라서 추가 파라미터로 memo=[]를 추가합니다.
//memo에는 8,5,3 이렇게 숫자가 담기고, 목표하는 n까지 값이 담겨야 리턴하고
//그렇지 않으면 계속 재귀를 돌며 n숫자를 쪼개나갑니다.
if(memo[n] !== undefined){
  return memo[n]
}

//메모이제이션은 작은 숫자부터 목표하는 숫자(n)까지 memo에 담아가며 쌓아올리는 접근법입니다.
//가장 작은 숫자에 해당하는 값은 정해져 있어야 그 숫자를 바탕으로 쌓아올릴 수 있습니다.
//피보나치에서는 0,1,2 각 숫자들이 더이상 쪼개어지지 않는 최소한의 값을 리턴하는 n들입니다.
if(n === 2 || n === 1){
  return 1
}else if(n === 0){
  return 0
}
//res는 해당하는 각 n에 대한 값이고 이 값은 메모에 저장됩니다. 
let res = fibonacci(n-1, memo)+fibonacci(n-2, memo)
memo[n] = res
//마지막 콜백이면 27번줄에서 저장하는 의미는 없고 그대로 res를 리턴함으로써 n에 해당하는 결과값을 반환합니다.
return res
}